/*
 * This file is protected by Copyright. Please refer to the COPYRIGHT file 
 * distributed with this source distribution.
 * 
 * This file is part of REDHAWK core.
 * 
 * REDHAWK core is free software: you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by the 
 * Free Software Foundation, either version 3 of the License, or (at your 
 * option) any later version.
 * 
 * REDHAWK core is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License 
 * for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License 
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 */


#ifndef _QUERYABLE_PORT_IDL_
#define _QUERYABLE_PORT_IDL_

#include "ossie/CF/DataType.idl"
#include "ossie/CF/Port.idl"

module ExtendedCF {

    struct UsesConnection {
        string connectionId;
        Object port;
        Object providesParent;
        Object usesParent;
    };

    struct PortReference {
        string connectionId;
        Object usesPort;
        Object usesParent;
        Object providesParent;
    };

    typedef sequence<UsesConnection> UsesConnectionSequence;

    typedef sequence<PortReference> PortReferenceSequence;

    // The QueryablePort interface extends the standard CF::Port so that
    // the list of current connections can be queried.
    interface QueryablePort : CF::Port {
        readonly attribute UsesConnectionSequence connections;
    };

    interface UsesPort : QueryablePort {
        void disconnect (in string connectionId) raises (CF::Port::InvalidPort);
        void connect (in Object providesPort, in Object providesParent, in Object usesParent, in string connectionId)
            raises (CF::Port::InvalidPort, CF::Port::InvalidConnectionId);
    };
    interface ProvidesPort {
        readonly attribute PortReferenceSequence references;
        void refreshReferences ();
        void removeReference (in string connectionId) raises (CF::Port::InvalidPort);
        void establishReference (in Object usesPort, in Object usesParent, in Object providesParent, in string connectionId)
            raises (CF::Port::InvalidPort, CF::Port::InvalidConnectionId);
    };
};

#endif
