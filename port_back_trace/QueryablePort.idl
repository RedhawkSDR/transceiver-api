/*
 * This file is protected by Copyright. Please refer to the COPYRIGHT file 
 * distributed with this source distribution.
 * 
 * This file is part of REDHAWK core.
 * 
 * REDHAWK core is free software: you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by the 
 * Free Software Foundation, either version 3 of the License, or (at your 
 * option) any later version.
 * 
 * REDHAWK core is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License 
 * for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License 
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 */


#ifndef _QUERYABLE_PORT_IDL_
#define _QUERYABLE_PORT_IDL_

#include "ossie/CF/DataType.idl"
#include "ossie/CF/Port.idl"

module ExtendedCF {

    // NB: The name "UsesConnection" is a little misleading now, but changing
    // it could break user code. We could use a typedef, but due to the lack of
    // typedefs in Java, no code is generated for aliases. This means either:
    // * Rename struct, typedef to UsesConnection: Java code that is currently
    //   using UsesConnection breaks.
    // * Typedef UsesConnection to new name: Java code cannot use the alias.
    struct UsesConnection {
        string connectionId;
        Object port;
    };

    typedef sequence<UsesConnection> UsesConnectionSequence;

    // Mix-in class for both uses and provides ports that allows inspection of
    // the parent object and the known connections.
    interface InspectablePort {
        readonly attribute CF::PortSupplier parent;
        readonly attribute UsesConnectionSequence connections;
    };

    // The QueryablePort interface extends the standard CF::Port so that
    // the list of current connections can be queried.
    interface QueryablePort : CF::Port, InspectablePort {
    };

    interface ProvidesPort : InspectablePort {
        void refreshReferences ();
        void removeConnection (in string connectionId) raises (CF::Port::InvalidPort);
        void addConnection (in Object usesPort, in string connectionId)
            raises (CF::Port::InvalidPort, CF::Port::InvalidConnectionId);
    };
};

#endif
