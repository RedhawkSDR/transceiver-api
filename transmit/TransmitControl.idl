/*
 * This file is protected by Copyright. Please refer to the COPYRIGHT file 
 * distributed with this source distribution.
 * 
 * This file is part of REDHAWK core.
 * 
 * REDHAWK core is free software: you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by the 
 * Free Software Foundation, either version 3 of the License, or (at your 
 * option) any later version.
 * 
 * REDHAWK core is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License 
 * for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License 
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 */

#ifndef _FRONTEND_TRANSMITCONTROL_IDL_
#define _FRONTEND_TRANSMITCONTROL_IDL_

#include "redhawk/FRONTEND/Frontend.idl" 
#include "redhawk/FRONTEND/TunerControl.idl" 
#include "ossie/BULKIO/bulkioDataTypes.idl"

module FRONTEND {

	/**
		Mandated Structures and Ports:
		------------------------------
		Frontend mandates four property structures outside of normal REDHAWK properties of "device_kind" and "device_model" :
			(1) FRONTEND::tuner_allocation  - allocation structure to acquire capability on a tuner based off tuner settings. 	       
					Name || ID || Type || Description
					- tuner_type || FRONTEND::tuner_allocation::tuner_type || string || Example Tuner Types: TX, RX, CHANNELIZER, DDC, RX_DIGITIZER, RX_DIGITIZER_CHANNELIZER, RX_SCANNER_DIGITIZER
					- allocation_id || FRONTEND::tuner_allocation::allocation_id || string || The allocation_id set by the caller. Used by the caller to reference the device uniquely
					- center_frequency || FRONTEND::tuner_allocation::center_frequency || double || Requested center frequency in Hz
					- bandwidth || FRONTEND::tuner_allocation::bandwidth || double || Requested Bandwidth in Hz
					- bandwidth_tolerance || FRONTEND::tuner_allocation::bandwidth_tolerance || double || Allowable Percent above requested bandwidth (ie - 100 would be up to twice)
					- sample_rate || FRONTEND::tuner_allocation::sample_rate || double || Requested sample rate in Hz. This can be ignored for such devices as analog tuners
					- sample_rate_tolerance	|| FRONTEND::tuner_allocation::sample_rate_tolerance || double || Allowable Percent above requested sample rate (ie - 100 would be up to twice)
					- device_control || FRONTEND::tuner_allocation::device_control || boolean || True: Has control over the device to make changes. False: Does not need control and can just attach 
					        to any currently tasked device that satisfies the parameters (essentually a listener)
					- group_id || FRONTEND::tuner_allocation::group_id || string || Unique identifier that specifies a group of device. Must match group_id on the device
					- rf_flow_id || FRONTEND::tuner_allocation::rf_flow_id || string || Optional. Specifies a certain RF flow to allocate against. If left empty, it will match all frontend devices. 
            (2) FRONTEND::scanner_allocation
                  Allocation structure to acquire capability on a scanning tuner (must be used in conjunction with FRONTEND::tuner_allocation).
                  Note that the allocation does not contain enough information to setup the scan strategy. Once the device is allocated, the strategy must be set through the control API
                    Name || ID || Type || Description
                    - min_freq || FRONTEND::scanner_allocation::min_freq || double || Requested lower edge of the scanning band
                    - max_freq || FRONTEND::scanner_allocation::max_freq || double || Requested upper edge of the scanning band
                    - mode || FRONTEND::scanner_allocation::mode || enum string || SPAN_SCAN or DISCRETE_SCAN
                    - control_mode || FRONTEND::scanner_allocation::control_mode || enum string|| TIME_BASED or SAMPLE_BASED
                    - control_limit || FRONTEND::scanner_allocation::control_limit || double || Either the fastest hop rate (TIME_BASED) or shortest set of samples (SAMPLE_BASED) that the scanner is expected to support. In samples, the number that will be needed before the next retune, equivalent to control_limit >= sample_rate/(max_settle_time+min_dwell_time) is met before the next retune
			(3) FRONTEND::listener_allocation  - additional allocation structure to acquire "listener" capability on a tuner based off a previous allocation. "Listeners" have the ability to receive the data 
					but can not modify the settings of the tuner	       
					Name || ID || Type || Description
					- existing_allocation_id || FRONTEND::listener_allocation::existing_allocation_id || string || Allocation ID for an existing allocation. Could be either control or listener
					- listener_allocation_id || FRONTEND::listener_allocation::listener_allocation_id || string || New Listener ID 
			(4) FRONTEND::tuner_status  - a struct sequence containing the status of all tuners. There are optional and required fields for this structure. The required fields are listed below:
					Name || ID || Type || Description
					- tuner_type || FRONTEND::tuner_status::tuner_type || string || Example Tuner Types: TX, RX, CHANNELIZER, DDC, RX_DIGITIZER, RX_DIGITIZER_CHANNELIZER, RX_SCANNER_DIGITIZER
					- allocation_id_csv || FRONTEND::tuner_status::allocation_id_csv || string || Comma seperated list of currrent allocation ids, both control and listeners.
					- center_frequency || FRONTEND::tuner_status::center_frequency || double || Current center frequency in Hz
					- bandwidth || FRONTEND::tuner_status::bandwidth || double || Current Bandwidth in Hz
					- sample_rate || FRONTEND::tuner_status::sample_rate || double || Current sample rate in Hz. This can be ignored for such devices as analog tuners
					- group_id || FRONTEND::tuner_status::group_id || string || Unique identifier that specifies a group of device.
					- rf_flow_id || FRONTEND::tuner_status::rf_flow_id || string || Specifies a certain RF flow to allocate against.
					- enabled || FRONTEND::tuner_status::enabled || boolean || True is tuner is enabled. Can be allocated but disabled 
				If the tuner_type is of type RX_SCANNER_DIGITIZER, the following optional fields are required as part of FRONTEND::tuner_status:
					- scan_mode_enabled || FRONTEND::tuner_status::scan_mode_enabled || boolean || True is scan mode is enabled. False is Manual Tune is enabled 
					- supports_scan || FRONTEND::tuner_status::supports_scan || boolean || True if scan is supported
            (5) FRONTEND::transmitter_allocation
                    Allocation structure to refine transmit request (must be used in conjunction with FRONTEND::tuner_allocation). FRONTEND::tuner_allocation::center_frequency and FRONTEND::tuner_allocation::sample_rate are not valid in FRONTEND::tuner_allocation; those values are derived from the incoming stream's SRI. FRONTEND::tuner_allocation::bandwidth is valid in the allocation
                    Name || ID || Type || Description
                    - min_freq || FRONTEND::transmitter_allocation::min_freq || double || Requested lower edge of the scanning band
                    - max_freq || FRONTEND::transmitter_allocation::max_freq || double || Requested upper edge of the scanning band
                    - control_limit || FRONTEND::transmitter_allocation::control_limit || double || control_limit >= sample_rate/(max_settle_time+min_dwell_time) is met before the next retune
                    - max_power || FRONTEND::transmitter_allocation::max_power || double || max_bw => transmitted burst power
					
		Usual port additions include a input (provides) port for the tuner control as well as an output (uses) BULKIO data port that follows the naming convention [interface]_[in/out]. Examples
		include dataShort_out, dataSDDS_out,  dataOctet_in, and DigitalTuner_in.
		
		
		Tuner Types:
		------------
		Frontend devices are seperated in several tuner types based on functionality. The base supported types are listed below but can be extended (ie - new types can be created)
		to satisfy ones CONOP.	
			- TX: Transmitter (input digital, output analog) 
			- RX: Analog Receiver (input analog, output analog) 
			- RX_DIGITIZER: Digital Receiver (input analog, output digital) 
			- CHANNELIZER: Accepts digitized wideband and provides DDC's (allocation against a channelizer ensures that the input port is not shared)  
			- DDC: Digital Down Converter. Channel that is extracted from a wider bandwidth (ie - Channelizer). Similar to a RX_DIGITIZER but often much cheaper.
			- RX_DIGITIZER_CHANNELIZER: RX_DIGITIZER and CHANNELIZER combo. The reason they are combined is because they are a single device that cannot operate 
			 		independetly (ie - RX_DIGITIZER can not output full-rate or the CHANNELIZER can not accept external input)
            - RX_SCANNER_DIGITIZER: Frequency scanning digitizer
			
			
			
		Allocation ID:
		--------------
		This interface introduces the concept of an allocation id. An allocation id is a unique identifier given to the tuner (channel) in a device at allocation time. For the 
		life of that allocation, that specific tuner is referenced by that unique allocation id. When that tuner is no longer needed, a deallocation occurs on that allocation id, 
		thus freeing the tuner. 
		
		
		
		Data Egress:
		------------
		Multi-tuner frontend devices requires customization of the output port. In this case, data from all tuners are sent out a single output port named "data[Type]_out" (ie - dataShort_out). Since there
		are multiple streams going out of the port, data is routed based off the streams "allocation_id" and the ports "connection_id". For example, lets say you have 3 tuners allocated with the respective 
		allocation id's: allocID_1, allocID_2, and allocID_3. Now lets say you want to make a connection to the device and get the second tuners data. What you would have to do is to connect to the data[Type]_out 
		port with the connection_id set to "allocID_2". 
	
	*/

    interface TransmitStatusConsumer;

    interface TransmitControl : DigitalTuner {
        /************************/
        /*      STRUCTURES      */
        /************************/
        enum TransmitStatusMode {
            OK,
            UNDERFLOW, /* not enough data to fill the needed time */
            OVERFLOW, /* hardware cannot transmit the data at the rate requested */
            INSUFFICIENT_SETTLING_TIME, /* time difference between end of last transmit and new transmit with a tune is insufficient */
            MISSED_TRANSMIT_WINDOW, /* transmit could not begin at the requested time */
            INVALID_TRANSMIT_TIME_OVERLAP, /* the timestamp for the last sample in the previous packet is after the timestamp for the first sample in the current packet */
            HARDWARE_FAILURE /* general hardware failure */
        };

        struct TransmitStatus {
            string              stream_id;
            unsigned long long  total_samples; /* number of samples transmitted from this stream id; resets to 0 when >= max Ulonglong */
            unsigned long long  total_bursts; /* number of bursts transmitted (pushPacket calls) from this stream id; resets to 0 when >= max Ulonglong */
            boolean             transmitting;    /* set to false if transmitter is in error mode and ignoring bulk io data */
            TransmitStatusMode  transmit_status; /* Current mode (anything other than OK is an error mode). If TransmitParameters ignore_error is true, then error code can be set but data is still transmitting */
            double              settling_time; /* this is the hardware's current re-tune settling time */
            unsigned long       queued_bursts; /* number of bursts that are yet to be transmitted */
        };

        typedef sequence <TransmitStatus> TransmitStatusList;

        struct TransmitParameters {
            string  stream_id; /* if empty string, then applies to all streams */
            boolean ignore_timestamp; /* set to true for continuous data. Insufficient data will cause an UNDERFLOW error */
            boolean ignore_error; /* set to true to ignore error states and just transmit */
            double  tx_power; /* -1 for don't care */
            double  max_allowed_timing_error; /* how much deviation (over/under) before MISSED_TRANSMIT_WINDOW is set as the error code; -1 for don't care */
            /* time for the burst transmission is the bulk io timestamp, unless ignore_timestamp is true; then data is sent as soon as it is available */
            /* center frequency for the burst transmission is CHAN_RF keyword in SRI */
            /* duration of the burst is the length of the packet * the sampling period (in SRI) */
        };

        enum NotificationMode {
            ALL,                /* one notification per burst */
            QUEUE_EMPTY,        /* notification when queue empties */
            ENTER_ERROR_STATE,  /* notification when transition from OK to error status */
            REGULAR_INTERVAL    /* notification on a regular basis (requires policy_value to be set) */
        };

        struct TransmitNotificationPolicy {
            NotificationMode policy;
            double policy_value; /* only relevant with REGULAR_INTERVAL mode */
        };

        /* receive feedback on data pushes */
        /* set stream_id to emptry string for feedback on all streams */
        string registerNotification(in string allocation_id, in string stream_id, in TransmitStatusConsumer consumer, in TransmitNotificationPolicy policy);
        void unregisterNotification(in string reg_id);

        /* set stream_id to emptry string for status on all streams */
        TransmitStatusList getTransmitStatus(in string allocation_id, in string stream_id)
            raises (FRONTEND::FrontendException, FRONTEND::BadParameterException);

        unsigned long getTransmitQueueLength(in string allocation_id)
            raises (FRONTEND::FrontendException, FRONTEND::BadParameterException);

        /* reset allocation:
              - remove error codes
              - empty the transmit queue
              - reset total_samples count
              - reset total_bursts count */
        void reset(in string allocation_id)
            raises (FRONTEND::FrontendException, FRONTEND::BadParameterException);

        void setTransmitParameters(in string allocation_id, in TransmitParameters transmit_parameters)
            raises (FRONTEND::FrontendException, FRONTEND::BadParameterException);
    };

    interface TransmitStatusConsumer {
        void updateStatus(in TransmitControl::TransmitStatus status);
    };

};
#endif
