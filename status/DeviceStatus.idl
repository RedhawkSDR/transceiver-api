#ifndef _FRONTEND_DEVICESTATUS_IDL_
#define _FRONTEND_DEVICESTATUS_IDL_

#include "redhawk/FRONTEND/Frontend.idl" 

module FRONTEND {

    // NB: Enumeration labels in IDL cannot be given explicit values. To
    // prevent breakage, either new labels must be added after the last label,
    // or reserved labels must be defined for later use.
    enum ErrorCodeType {
        ERROR_UNDERFLOW,
        ERROR_OVERFLOW,
        ERROR_TIMESTAMP,
        ERROR_CUSTOM
    };

    struct DeviceErrorEvent {
        string         device_id;
        string         allocation_id;
        CF::UTCTime    timestamp;
        ErrorCodeType  error_code;
        string         error_message;
        CF::Properties error_props;
    };

    enum QueueActionType {
        QUEUE_ADDED,
        QUEUE_STARTED,
        QUEUE_FINISHED,
        QUEUE_CANCELLED,
        QUEUE_REJECTED
    };

    struct DeviceQueueEvent {
        string          device_id;
        string          allocation_id;
        CF::UTCTime     timestamp;
        string          transaction_id;
        QueueActionType queue_action;
        CF::Properties  queue_props;
    };

    // Generic status event, for device-specific status or other status types
    // we did not anticipate
    struct DeviceStatusEvent {
        string         device_id;
        string         allocation_id;
        CF::UTCTime    timestamp;
        string         status_type;
        CF::Properties status_props;
    };

    // In practice, this interface should inherit from the back-traceable
    // ProvidesPort interface.
    interface DeviceStatus {
        void deviceErrorOccurred(in DeviceErrorEvent error);
        void deviceQueueChanged(in DeviceQueueEvent event);
        void deviceStatusChanged(in DeviceStatusEvent status);
    };
};

#endif
